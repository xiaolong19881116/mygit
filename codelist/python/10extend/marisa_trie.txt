>>> help(trie)
Help on Trie object:

class Trie(_Trie)
 |  This trie stores unicode keys and assigns an unque ID to each key.
 |  
 |  Method resolution order:
 |      Trie
 |      _Trie
 |      __builtin__.object
 |  
 |  Methods defined here:
 |  
 |  __getitem__(...)
 |      x.__getitem__(y) <==> x[y]
 |  
 |  get(...)
 |      Return a key id for a given key or ``default`` if the key is not found.
 |  
 |  items(...)
 |  
 |  iter_prefixes(...)
 |      Return an iterator of all prefixes of a given key.
 |  
 |  iteritems(...)
 |      Return an iterator over items that have a prefix ``prefix``.
 |  
 |  key_id(...)
 |      Return unique auto-generated key index for a ``key``.
 |      Raises KeyError if key is not in this trie.
 |  
 |  prefixes(...)
 |      Return a list with all prefixes of a given key.
 |  
 |  restore_key(...)
 |      Return a key given its index (obtained by ``key_id`` method).
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __new__ = <built-in method __new__ of type object>
 |      T.__new__(S, ...) -> a new object with type S, a subtype of T
 |  
 |  __pyx_vtable__ = <capsule object NULL>
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _Trie:
 |  
 |  __contains__(...)
 |      x.__contains__(y) <==> y in x
 |  
 |  __eq__(...)
 |      x.__eq__(y) <==> x==y
 |  
 |  __ge__(...)
 |      x.__ge__(y) <==> x>=y
 |  
 |  __gt__(...)
 |      x.__gt__(y) <==> x>y
 |  
 |  __init__(...)
 |      ``arg`` can be one of the following:
 |      
 |      * an iterable with unicode keys;
 |      * None (if you're going to load a trie later).
 |      
 |      Pass a ``weights`` iterable with expected lookup frequences
 |      to optimize lookup and prefix search speed.
 |  
 |  __iter__(...)
 |      x.__iter__() <==> iter(x)
 |  
 |  __le__(...)
 |      x.__le__(y) <==> x<=y
 |  
 |  __len__(...)
 |      x.__len__() <==> len(x)
 |  
 |  __lt__(...)
 |      x.__lt__(y) <==> x<y
 |  
 |  __ne__(...)
 |      x.__ne__(y) <==> x!=y
 |  
 |  __reduce__(...)
 |  
 |  __setstate__(...)
 |  
 |  frombytes(...)
 |      Load a trie from bytes ``data``.
 |  
 |  has_keys_with_prefix(...)
 |      Returns True if any key in the trie begins with ``prefix``.
 |  
 |  iterkeys(...)
 |      Return an iterator over keys that have a prefix ``prefix``.
 |  
 |  keys(...)
 |      Return a list with all keys with a prefix ``prefix``.
 |  
 |  load(...)
 |      Load trie from a file.
 |  
 |  mmap(...)
 |      Mmap trie to a file; this allows lookups without loading full
 |      trie to memory.
 |  
 |  read(...)
 |      Read a trie from an open file object.
 |      
 |      Works only with "real" disk-based file objects,
 |      file-like objects are not supported.
 |  
 |  save(...)
 |      Save trie to a file.
 |  
 |  tobytes(...)
 |      Return raw trie content as bytes.
 |  
 |  write(...)
 |      Read a trie to an open file object.
 |      
 |      Works only with "real" disk-based file objects,
 |      file-like objects are not supported.
(END) 

import marisa_trie as mt 
trie = mt.Trie([u"key1",u"key2",u"key3"])
u"key1" in trie #True 
trie.key_id(u"key1")#0
trie[u"key2"]#1
trie.restore_key(2)#u"key3"
len(trie)#3
trie.prefix(u"key12")
trie = mt.Trie([u"key1",u"key2",u"key3",u"key12"])
trie.prefixes(u"key12") #[u'key1', u'key12']
trie.keys() # [u'key1', u'key12', u'key2', u'key3']
trie.keys(u"key1") #[u'key1', u'key12']
trie.items() # [(u'key1', 0), (u'key12', 3), (u'key2', 1), (u'key3', 2)]
trie.items(u"key1") # [(u'key1', 0), (u'key12', 3)]

-----------------------------------------------------------------------------------------
>>> help(trie)
Help on RecordTrie object:

class RecordTrie(_UnpackTrie)
 |  This class implements read-only Trie-based
 |  {unicode -> list of tuples} mapping where all tuples are of the
 |  same structure and may be packed with the same format string
 |  using python ``struct`` module from the standard library.
 |  
 |  The payload format must be defined at creation time using ``fmt``
 |  constructor argument; it has the same meaning as ``fmt`` argument
 |  for functions from ``struct`` module; take a look at
 |  http://docs.python.org/library/struct.html#format-strings for the
 |  specification.
 |  
 |  This mapping is implemented by appending binary values to
 |  utf8-encoded keys and storing the result in MARISA-trie.
 |  
 |  Method resolution order:
 |      RecordTrie
 |      _UnpackTrie
 |      BytesTrie
 |      _Trie
 |      __builtin__.object
 |  
 |  Methods defined here:
 |  
 |  __init__(...)
 |      ``arg`` must be an iterable of tuples (unicode_key, data_tuple).
 |      Data tuples will be converted to bytes with
 |      ``struct.pack(fmt, *data_tuple)``.
 |      
 |      Take a look at
 |      http://docs.python.org/library/struct.html#format-strings for the
 |      format string specification.
 |  
 |  __reduce__(...)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __new__ = <built-in method __new__ of type object>
 |      T.__new__(S, ...) -> a new object with type S, a subtype of T
 |  
 |  __pyx_vtable__ = <capsule object NULL>
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _UnpackTrie:
 |  
 |  b_get_value(...)
 |  
 |  items(...)
 |  
 |  iteritems(...)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from BytesTrie:
 |  
 |  __getitem__(...)
 |      x.__getitem__(y) <==> x[y]
 |  
 |  get(...)
 |      Return a list of payloads (as byte objects) for a given key
 |      or ``default`` if the key is not found.
 |  
 |  get_value(...)
 |      Return a list of payloads (as byte objects) for a given unicode key.
 |  
 |  iterkeys(...)
 |  
 |  keys(...)
 |  
 |  prefixes(...)
 |      Return a list with all prefixes of a given key.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _Trie:
 |  
 |  __contains__(...)
 |      x.__contains__(y) <==> y in x
 |  
 |  __eq__(...)
 |      x.__eq__(y) <==> x==y
 |  
 |  __ge__(...)
 |      x.__ge__(y) <==> x>=y
 |  
 |  __gt__(...)
 |      x.__gt__(y) <==> x>y
 |  
 |  __iter__(...)
 |      x.__iter__() <==> iter(x)
 |  
 |  __le__(...)
 |      x.__le__(y) <==> x<=y
 |  
 |  __len__(...)
 |      x.__len__() <==> len(x)
 |  
 |  __lt__(...)
 |      x.__lt__(y) <==> x<y
 |  
 |  __ne__(...)
 |      x.__ne__(y) <==> x!=y
 |  
 |  __setstate__(...)
 |  
 |  frombytes(...)
 |      Load a trie from bytes ``data``.
 |  
 |  has_keys_with_prefix(...)
 |      Returns True if any key in the trie begins with ``prefix``.
 |  
 |  load(...)
 |      Load trie from a file.
 |  
 |  mmap(...)
 |      Mmap trie to a file; this allows lookups without loading full
 |      trie to memory.
 |  
 |  read(...)
 |      Read a trie from an open file object.
 |      
 |      Works only with "real" disk-based file objects,
 |      file-like objects are not supported.
 |  
 |  save(...)
 |      Save trie to a file.
 |  
 |  tobytes(...)
 |      Return raw trie content as bytes.
 |  
 |  write(...)
 |      Read a trie to an open file object.
 |      
 |      Works only with "real" disk-based file objects,
 |      file-like objects are not supported.
(END) 

marisa_trie.RecordTrie
keys = [u'foo', u'bar', u'foobar', u'foo']
values = [(1, 2), (2, 1), (3, 3), (2, 1)]
fmt = "<HH"   # a tuple with 2 short integers
trie = marisa_trie.RecordTrie(fmt, zip(keys, values))
trie.items() #[(u'foo', (1, 2)), (u'foo', (2, 1)), (u'foobar', (3, 3)), (u'bar', (2, 1))]
u'foo' in trie # True 
trie.get(u'bar', 123) # [(2, 1)]
trie.items(u'fo') # [(u'foo', (1, 2)), (u'foo', (2, 1)), (u'foobar', (3, 3))]

-----------------------------------------------------------------------------------------------
marisa_trie.BytesTrie
>>> keys = [u'foo', u'bar', u'foobar', u'foo']
>>> values = [b'foo-value', b'bar-value', b'foobar-value', b'foo-value2']
>>> trie = marisa_trie.BytesTrie(zip(keys, values))
>>> trie[u'bar']
[b'bar-value']
---------------------------------------------------------------------------------------------
Persistence
Trie objects supports saving/loading, pickling/unpickling and memory mapped I/O.

Write trie to a stream:

>>> with open('my_trie.marisa', 'w') as f:
...     trie.write(f)
Save trie to a file:

>>> trie.save('my_trie_copy.marisa')
Read trie from stream:

>>> trie2 = marisa_trie.Trie()
>>> with open('my_trie.marisa', 'r') as f:
...     trie.read(f)
Load trie from file:

>>> trie2.load('my_trie.marisa')
Trie objects are picklable:

>>> import pickle
>>> data = pickle.dumps(trie)
>>> trie3 = pickle.loads(data)


pwd 
/home/xianlong.mxl

import marisa_trie as mt 
#a-b-c-d a-b-c a-b a-b-d b-c-d c-d 
trie = mt.Trie([u"a-b-c-d",u"a-b-c",u"a-b",u"a-b-d",u"b-c-d",u"c-d"])

